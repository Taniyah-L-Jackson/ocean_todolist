{"version":3,"sources":["App.js","index.js"],"names":["List","props","listItems","items","map","tasks","key","className","type","id","value","text","onChange","e","updateItem","target","onClick","deleteItem","App","useState","todoList","setTodoList","task","setTask","onSubmit","preventDefault","newItems","name","placeholder","prevTask","Date","now","filterItems","filter","item","updated","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAEA,SAASA,EAAKC,GAGZ,IAAMC,EAAYD,EAAME,MAAMC,KAAI,SAAAC,GAChC,OAGE,yBAAKC,IAAKD,EAAMC,KACd,uBAAGC,UAAU,aAEX,2BACAC,KAAK,OACLC,GAAIJ,EAAMC,IACVI,MAAOL,EAAMM,KACbJ,UAAU,cACVK,SAAU,SAACC,GAAOZ,EAAMa,WAAWD,EAAEE,OAAOL,MAAOL,EAAMC,QAP3D,IASE,8BACE,uBACEC,UAAU,0BACVS,QAAS,kBAAMf,EAAMgB,WAAWZ,EAAMC,OAFxC,WAUV,OACE,oCAAGJ,GA6EQgB,MAzEf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGWF,mBAAS,CAC/BR,KAAM,GACNL,IAAK,KALM,mBAGNgB,EAHM,KAGAC,EAHA,KAkDb,OACE,yBAAKhB,UAAU,UACb,yBAAKA,UAAU,YACb,0BAAMiB,SApBI,SAACX,GAGf,GAFAA,EAAEY,iBAEgB,KAAdH,EAAKX,KAAa,CACpB,IAAMe,EAAQ,sBAAON,GAAP,CAAiBE,IAC/BD,EAAYK,GACZH,EAAQ,CAACjB,IAAK,GAAIK,KAAM,QActB,KACE,2BACEH,KAAK,OACLmB,KAAK,OACLpB,UAAY,aACZqB,YAAY,aACZlB,MAAOY,EAAKX,KACZC,SAnDW,SAACC,GAAO,IAEnBH,EAAUG,EAAEE,OAAZL,MAGRa,GAAQ,SAAAM,GACN,kCAAUA,GAAV,IAAoBlB,KAAMD,EAAOJ,IAAKwB,KAAKC,cA+CvC,4BAAQxB,UAAU,WAAlB,QAEF,yBAAKA,UAAU,UACX,kBAACP,EAAD,CAAMG,MAAOiB,EAAUH,WArBd,SAACX,GAClB,IAAM0B,EAAcZ,EAASa,QAAO,SAAAC,GAAI,OAAIA,EAAK5B,MAAQA,KACzDe,EAAYW,IAmB2ClB,WA5CtC,SAACH,EAAML,GAExB,IAAM6B,EAAUf,EAChBe,EAAQ/B,KAAI,SAAA8B,GAIV,OAHGA,EAAK5B,MAAQA,IACd4B,EAAKvB,KAAOA,GAEPuB,KAETb,EAAY,YAAIc,OAkCZ,QC/FRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.7799c2fd.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction List(props) {\n\n  // map over list\n  const listItems = props.items.map(tasks => {\n    return (\n      //the text is placed in the input tag\n      //the input tag allows the list to be updated\n      <div key={tasks.key}>\n        <p className='secondBox'>\n          \n          <input \n          type=\"text\"\n          id={tasks.key} //stores key for task in list\n          value={tasks.text} //holds text for task in list\n          className='secondInput'\n          onChange={(e) => {props.updateItem(e.target.value, tasks.key)}}/> {/*allows you to type in input box*/}\n\n          <span>\n            <i \n              className=\"far fa-trash-alt delete\"\n              onClick={() => props.deleteItem(tasks.key)}> {/* delete button */}\n            </i>\n          </span>\n\n        </p>\n      </div>\n    )\n  })\n  return (\n    <>{listItems}</> //show items in list\n  )\n}\n\nfunction App() {\n\n  const [todoList, setTodoList] = useState([]) //holds item list\n  const [task, setTask] = useState({ //gets current item \n    text: '', //item text\n    key: '' //date item was added\n  })\n\n  //read current item\n  const handleChange = (e) => {\n\n    const { value } = e.target //e.target = event.target\n\n    // update task\n    setTask(prevTask => {\n      return{...prevTask, text: value, key: Date.now()}\n    })\n    \n  }\n\n  //update list\n  const updateItem = (text, key) => {\n\n    const updated = todoList //get list\n    updated.map(item => { //map over list\n      if(item.key === key) { //find matching key\n        item.text = text \n      }\n      return item\n    })\n    setTodoList([...updated]) //update list\n  }\n\n  const addItem = (e) => {\n    e.preventDefault() //prevents refresh\n\n    if (task.text !== '') { \n      const newItems = [...todoList, task]//copy original list and update list\n      setTodoList(newItems)\n      setTask({key: '', text: ''}) //clear out for next task\n    }\n  }\n\n  //delete task\n  const deleteItem = (key) => {\n    const filterItems = todoList.filter(item => item.key !== key) //remove items that have the same key as the key passed\n    setTodoList(filterItems) //update list\n  }\n\n\n  return (\n    <div className='adjust'>\n      <div className='firstBox'>\n        <form onSubmit={addItem}>  {/* add items to list */}\n          <input \n            type=\"text\" \n            name=\"text\"\n            className = 'firstInput'\n            placeholder='Enter Text' \n            value={task.text}\n            onChange={handleChange} //edit text\n          />\n          <button className='addItem'>Add</button>\n        </form>\n        <div className='border'>\n            <List items={todoList} deleteItem={deleteItem} updateItem={updateItem}/> {/* passed functions that allow the list that can be shown and edited in the List function */}\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n// NOTE: \n// Using a value prop without an onChange handler will render a read-only field. Meaning that you cannot type in the input field\n// After handleSubmit fires, everything else after that is outside the return is ignored","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}